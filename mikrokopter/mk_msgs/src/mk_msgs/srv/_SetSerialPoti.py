"""autogenerated by genpy from mk_msgs/SetSerialPotiRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetSerialPotiRequest(genpy.Message):
  _md5sum = "2fccd5b9101c71baf5123296a0a3289b"
  _type = "mk_msgs/SetSerialPotiRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int32 poti1
int32 poti2
int32 poti3
int32 poti4


"""
  __slots__ = ['poti1','poti2','poti3','poti4']
  _slot_types = ['int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       poti1,poti2,poti3,poti4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetSerialPotiRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.poti1 is None:
        self.poti1 = 0
      if self.poti2 is None:
        self.poti2 = 0
      if self.poti3 is None:
        self.poti3 = 0
      if self.poti4 is None:
        self.poti4 = 0
    else:
      self.poti1 = 0
      self.poti2 = 0
      self.poti3 = 0
      self.poti4 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.poti1, _x.poti2, _x.poti3, _x.poti4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.poti1, _x.poti2, _x.poti3, _x.poti4,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.poti1, _x.poti2, _x.poti3, _x.poti4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.poti1, _x.poti2, _x.poti3, _x.poti4,) = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i = struct.Struct("<4i")
"""autogenerated by genpy from mk_msgs/SetSerialPotiResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetSerialPotiResponse(genpy.Message):
  _md5sum = "efd27fb04e2a6ce3c9ff1f47eb32e7bb"
  _type = "mk_msgs/SetSerialPotiResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int16 ack


"""
  __slots__ = ['ack']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ack

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetSerialPotiResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ack is None:
        self.ack = 0
    else:
      self.ack = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_h.pack(self.ack))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.ack,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_h.pack(self.ack))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.ack,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
class SetSerialPoti(object):
  _type          = 'mk_msgs/SetSerialPoti'
  _md5sum = 'd1224392e458021cfd856dc94ab7891a'
  _request_class  = SetSerialPotiRequest
  _response_class = SetSerialPotiResponse
