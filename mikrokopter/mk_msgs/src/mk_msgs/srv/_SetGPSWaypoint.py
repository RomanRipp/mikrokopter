"""autogenerated by genpy from mk_msgs/SetGPSWaypointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetGPSWaypointRequest(genpy.Message):
  _md5sum = "c1ce5d208dc30cef244a48ead733472b"
  _type = "mk_msgs/SetGPSWaypointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int32 index
float32 latitude
float32 longitude
float32 altitude
int32 status
int32 holdTime
float32 altitudeRate
float32 speed

float32 heading
int32 toleranceRadius
int32 eventChannel
int32 eventFlag
int32 type
int32 camAngle

"""
  __slots__ = ['index','latitude','longitude','altitude','status','holdTime','altitudeRate','speed','heading','toleranceRadius','eventChannel','eventFlag','type','camAngle']
  _slot_types = ['int32','float32','float32','float32','int32','int32','float32','float32','float32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,latitude,longitude,altitude,status,holdTime,altitudeRate,speed,heading,toleranceRadius,eventChannel,eventFlag,type,camAngle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetGPSWaypointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.status is None:
        self.status = 0
      if self.holdTime is None:
        self.holdTime = 0
      if self.altitudeRate is None:
        self.altitudeRate = 0.
      if self.speed is None:
        self.speed = 0.
      if self.heading is None:
        self.heading = 0.
      if self.toleranceRadius is None:
        self.toleranceRadius = 0
      if self.eventChannel is None:
        self.eventChannel = 0
      if self.eventFlag is None:
        self.eventFlag = 0
      if self.type is None:
        self.type = 0
      if self.camAngle is None:
        self.camAngle = 0
    else:
      self.index = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.status = 0
      self.holdTime = 0
      self.altitudeRate = 0.
      self.speed = 0.
      self.heading = 0.
      self.toleranceRadius = 0
      self.eventChannel = 0
      self.eventFlag = 0
      self.type = 0
      self.camAngle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i3f2i3f5i.pack(_x.index, _x.latitude, _x.longitude, _x.altitude, _x.status, _x.holdTime, _x.altitudeRate, _x.speed, _x.heading, _x.toleranceRadius, _x.eventChannel, _x.eventFlag, _x.type, _x.camAngle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.index, _x.latitude, _x.longitude, _x.altitude, _x.status, _x.holdTime, _x.altitudeRate, _x.speed, _x.heading, _x.toleranceRadius, _x.eventChannel, _x.eventFlag, _x.type, _x.camAngle,) = _struct_i3f2i3f5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i3f2i3f5i.pack(_x.index, _x.latitude, _x.longitude, _x.altitude, _x.status, _x.holdTime, _x.altitudeRate, _x.speed, _x.heading, _x.toleranceRadius, _x.eventChannel, _x.eventFlag, _x.type, _x.camAngle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.index, _x.latitude, _x.longitude, _x.altitude, _x.status, _x.holdTime, _x.altitudeRate, _x.speed, _x.heading, _x.toleranceRadius, _x.eventChannel, _x.eventFlag, _x.type, _x.camAngle,) = _struct_i3f2i3f5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i3f2i3f5i = struct.Struct("<i3f2i3f5i")
"""autogenerated by genpy from mk_msgs/SetGPSWaypointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetGPSWaypointResponse(genpy.Message):
  _md5sum = "efd27fb04e2a6ce3c9ff1f47eb32e7bb"
  _type = "mk_msgs/SetGPSWaypointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int16 ack


"""
  __slots__ = ['ack']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ack

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetGPSWaypointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ack is None:
        self.ack = 0
    else:
      self.ack = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_h.pack(self.ack))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.ack,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_h.pack(self.ack))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.ack,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
class SetGPSWaypoint(object):
  _type          = 'mk_msgs/SetGPSWaypoint'
  _md5sum = '167ab490b44feaf311e87f25a5b4ea94'
  _request_class  = SetGPSWaypointRequest
  _response_class = SetGPSWaypointResponse
