"""autogenerated by genpy from mk_msgs/GetRendezvousPointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetRendezvousPointRequest(genpy.Message):
  _md5sum = "47ee336267def9acd9c52f97182bd954"
  _type = "mk_msgs/GetRendezvousPointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


float32 currLatitude
float32 currLongitude

"""
  __slots__ = ['currLatitude','currLongitude']
  _slot_types = ['float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       currLatitude,currLongitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetRendezvousPointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.currLatitude is None:
        self.currLatitude = 0.
      if self.currLongitude is None:
        self.currLongitude = 0.
    else:
      self.currLatitude = 0.
      self.currLongitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.currLatitude, _x.currLongitude))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.currLatitude, _x.currLongitude,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.currLatitude, _x.currLongitude))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.currLatitude, _x.currLongitude,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
"""autogenerated by genpy from mk_msgs/GetRendezvousPointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetRendezvousPointResponse(genpy.Message):
  _md5sum = "94963735645ca33001d5b162101e4c1c"
  _type = "mk_msgs/GetRendezvousPointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int16 ack
float32 rendezLatitude
float32 rendezLongitude


"""
  __slots__ = ['ack','rendezLatitude','rendezLongitude']
  _slot_types = ['int16','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ack,rendezLatitude,rendezLongitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetRendezvousPointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ack is None:
        self.ack = 0
      if self.rendezLatitude is None:
        self.rendezLatitude = 0.
      if self.rendezLongitude is None:
        self.rendezLongitude = 0.
    else:
      self.ack = 0
      self.rendezLatitude = 0.
      self.rendezLongitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h2f.pack(_x.ack, _x.rendezLatitude, _x.rendezLongitude))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.ack, _x.rendezLatitude, _x.rendezLongitude,) = _struct_h2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h2f.pack(_x.ack, _x.rendezLatitude, _x.rendezLongitude))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.ack, _x.rendezLatitude, _x.rendezLongitude,) = _struct_h2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h2f = struct.Struct("<h2f")
class GetRendezvousPoint(object):
  _type          = 'mk_msgs/GetRendezvousPoint'
  _md5sum = '60fb96562d024b790f9c37a37ae940f9'
  _request_class  = GetRendezvousPointRequest
  _response_class = GetRendezvousPointResponse
