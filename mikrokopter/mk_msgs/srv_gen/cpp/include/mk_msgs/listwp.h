/* Auto-generated by genmsg_cpp for file /home/loki/Documents/ros_workspace/mikrokopter/mk_msgs/srv/listwp.srv */
#ifndef MK_MSGS_SERVICE_LISTWP_H
#define MK_MSGS_SERVICE_LISTWP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mk_msgs
{
template <class ContainerAllocator>
struct listwpRequest_ {
  typedef listwpRequest_<ContainerAllocator> Type;

  listwpRequest_()
  {
  }

  listwpRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::mk_msgs::listwpRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::listwpRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct listwpRequest
typedef  ::mk_msgs::listwpRequest_<std::allocator<void> > listwpRequest;

typedef boost::shared_ptr< ::mk_msgs::listwpRequest> listwpRequestPtr;
typedef boost::shared_ptr< ::mk_msgs::listwpRequest const> listwpRequestConstPtr;


template <class ContainerAllocator>
struct listwpResponse_ {
  typedef listwpResponse_<ContainerAllocator> Type;

  listwpResponse_()
  : ack(0)
  {
  }

  listwpResponse_(const ContainerAllocator& _alloc)
  : ack(0)
  {
  }

  typedef int16_t _ack_type;
  int16_t ack;


  typedef boost::shared_ptr< ::mk_msgs::listwpResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::listwpResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct listwpResponse
typedef  ::mk_msgs::listwpResponse_<std::allocator<void> > listwpResponse;

typedef boost::shared_ptr< ::mk_msgs::listwpResponse> listwpResponsePtr;
typedef boost::shared_ptr< ::mk_msgs::listwpResponse const> listwpResponseConstPtr;

struct listwp
{

typedef listwpRequest Request;
typedef listwpResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct listwp
} // namespace mk_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::listwpRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::listwpRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::listwpRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::mk_msgs::listwpRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::listwpRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/listwpRequest";
  }

  static const char* value(const  ::mk_msgs::listwpRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::listwpRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::listwpRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::listwpRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::listwpResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::listwpResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::listwpResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const  ::mk_msgs::listwpResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xefd27fb04e2a6ce3ULL;
  static const uint64_t static_value2 = 0xc9ff1f47eb32e7bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::listwpResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/listwpResponse";
  }

  static const char* value(const  ::mk_msgs::listwpResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::listwpResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
int16 ack\n\
\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::listwpResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::listwpResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::listwpRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct listwpRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::listwpResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct listwpResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mk_msgs::listwp> {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const mk_msgs::listwp&) { return value(); } 
};

template<>
struct DataType<mk_msgs::listwp> {
  static const char* value() 
  {
    return "mk_msgs/listwp";
  }

  static const char* value(const mk_msgs::listwp&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::listwpRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const mk_msgs::listwpRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::listwpRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/listwp";
  }

  static const char* value(const mk_msgs::listwpRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::listwpResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const mk_msgs::listwpResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::listwpResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/listwp";
  }

  static const char* value(const mk_msgs::listwpResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MK_MSGS_SERVICE_LISTWP_H

