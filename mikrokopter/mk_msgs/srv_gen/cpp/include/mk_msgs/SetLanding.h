/* Auto-generated by genmsg_cpp for file /home/loki/Documents/ros_workspace/mikrokopter/mk_msgs/srv/SetLanding.srv */
#ifndef MK_MSGS_SERVICE_SETLANDING_H
#define MK_MSGS_SERVICE_SETLANDING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mk_msgs
{
template <class ContainerAllocator>
struct SetLandingRequest_ {
  typedef SetLandingRequest_<ContainerAllocator> Type;

  SetLandingRequest_()
  : height(0.0)
  , lat(0.0)
  , lon(0.0)
  {
  }

  SetLandingRequest_(const ContainerAllocator& _alloc)
  : height(0.0)
  , lat(0.0)
  , lon(0.0)
  {
  }

  typedef double _height_type;
  double height;

  typedef double _lat_type;
  double lat;

  typedef double _lon_type;
  double lon;


  typedef boost::shared_ptr< ::mk_msgs::SetLandingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::SetLandingRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetLandingRequest
typedef  ::mk_msgs::SetLandingRequest_<std::allocator<void> > SetLandingRequest;

typedef boost::shared_ptr< ::mk_msgs::SetLandingRequest> SetLandingRequestPtr;
typedef boost::shared_ptr< ::mk_msgs::SetLandingRequest const> SetLandingRequestConstPtr;


template <class ContainerAllocator>
struct SetLandingResponse_ {
  typedef SetLandingResponse_<ContainerAllocator> Type;

  SetLandingResponse_()
  : ack(0)
  {
  }

  SetLandingResponse_(const ContainerAllocator& _alloc)
  : ack(0)
  {
  }

  typedef int16_t _ack_type;
  int16_t ack;


  typedef boost::shared_ptr< ::mk_msgs::SetLandingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::SetLandingResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetLandingResponse
typedef  ::mk_msgs::SetLandingResponse_<std::allocator<void> > SetLandingResponse;

typedef boost::shared_ptr< ::mk_msgs::SetLandingResponse> SetLandingResponsePtr;
typedef boost::shared_ptr< ::mk_msgs::SetLandingResponse const> SetLandingResponseConstPtr;

struct SetLanding
{

typedef SetLandingRequest Request;
typedef SetLandingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetLanding
} // namespace mk_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetLandingRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetLandingRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::SetLandingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ea54e94f291e0fea55aabc24c7b8b26a";
  }

  static const char* value(const  ::mk_msgs::SetLandingRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xea54e94f291e0feaULL;
  static const uint64_t static_value2 = 0x55aabc24c7b8b26aULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::SetLandingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetLandingRequest";
  }

  static const char* value(const  ::mk_msgs::SetLandingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::SetLandingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
float64 height\n\
float64 lat\n\
float64 lon\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::SetLandingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::SetLandingRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetLandingResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetLandingResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::SetLandingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const  ::mk_msgs::SetLandingResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xefd27fb04e2a6ce3ULL;
  static const uint64_t static_value2 = 0xc9ff1f47eb32e7bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::SetLandingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetLandingResponse";
  }

  static const char* value(const  ::mk_msgs::SetLandingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::SetLandingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
int16 ack\n\
\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::SetLandingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::SetLandingResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::SetLandingRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.height);
    stream.next(m.lat);
    stream.next(m.lon);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetLandingRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::SetLandingResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetLandingResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mk_msgs::SetLanding> {
  static const char* value() 
  {
    return "f85bad350c9de80d1ec2e364a6cdc138";
  }

  static const char* value(const mk_msgs::SetLanding&) { return value(); } 
};

template<>
struct DataType<mk_msgs::SetLanding> {
  static const char* value() 
  {
    return "mk_msgs/SetLanding";
  }

  static const char* value(const mk_msgs::SetLanding&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::SetLandingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f85bad350c9de80d1ec2e364a6cdc138";
  }

  static const char* value(const mk_msgs::SetLandingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::SetLandingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetLanding";
  }

  static const char* value(const mk_msgs::SetLandingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::SetLandingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f85bad350c9de80d1ec2e364a6cdc138";
  }

  static const char* value(const mk_msgs::SetLandingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::SetLandingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetLanding";
  }

  static const char* value(const mk_msgs::SetLandingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MK_MSGS_SERVICE_SETLANDING_H

