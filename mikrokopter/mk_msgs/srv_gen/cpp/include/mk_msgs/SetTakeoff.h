/* Auto-generated by genmsg_cpp for file /home/loki/Documents/ros_workspace/mikrokopter/mk_msgs/srv/SetTakeoff.srv */
#ifndef MK_MSGS_SERVICE_SETTAKEOFF_H
#define MK_MSGS_SERVICE_SETTAKEOFF_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mk_msgs
{
template <class ContainerAllocator>
struct SetTakeoffRequest_ {
  typedef SetTakeoffRequest_<ContainerAllocator> Type;

  SetTakeoffRequest_()
  : height(0.0)
  {
  }

  SetTakeoffRequest_(const ContainerAllocator& _alloc)
  : height(0.0)
  {
  }

  typedef double _height_type;
  double height;


  typedef boost::shared_ptr< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetTakeoffRequest
typedef  ::mk_msgs::SetTakeoffRequest_<std::allocator<void> > SetTakeoffRequest;

typedef boost::shared_ptr< ::mk_msgs::SetTakeoffRequest> SetTakeoffRequestPtr;
typedef boost::shared_ptr< ::mk_msgs::SetTakeoffRequest const> SetTakeoffRequestConstPtr;


template <class ContainerAllocator>
struct SetTakeoffResponse_ {
  typedef SetTakeoffResponse_<ContainerAllocator> Type;

  SetTakeoffResponse_()
  : ack(0)
  {
  }

  SetTakeoffResponse_(const ContainerAllocator& _alloc)
  : ack(0)
  {
  }

  typedef int16_t _ack_type;
  int16_t ack;


  typedef boost::shared_ptr< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetTakeoffResponse
typedef  ::mk_msgs::SetTakeoffResponse_<std::allocator<void> > SetTakeoffResponse;

typedef boost::shared_ptr< ::mk_msgs::SetTakeoffResponse> SetTakeoffResponsePtr;
typedef boost::shared_ptr< ::mk_msgs::SetTakeoffResponse const> SetTakeoffResponseConstPtr;

struct SetTakeoff
{

typedef SetTakeoffRequest Request;
typedef SetTakeoffResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetTakeoff
} // namespace mk_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "689e59833d9760375d61a82ed395adaf";
  }

  static const char* value(const  ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x689e59833d976037ULL;
  static const uint64_t static_value2 = 0x5d61a82ed395adafULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetTakeoffRequest";
  }

  static const char* value(const  ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
float64 height\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const  ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xefd27fb04e2a6ce3ULL;
  static const uint64_t static_value2 = 0xc9ff1f47eb32e7bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetTakeoffResponse";
  }

  static const char* value(const  ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
int16 ack\n\
\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::SetTakeoffRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetTakeoffRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::SetTakeoffResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetTakeoffResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mk_msgs::SetTakeoff> {
  static const char* value() 
  {
    return "b563bf2328afa304f456e28b10cefd41";
  }

  static const char* value(const mk_msgs::SetTakeoff&) { return value(); } 
};

template<>
struct DataType<mk_msgs::SetTakeoff> {
  static const char* value() 
  {
    return "mk_msgs/SetTakeoff";
  }

  static const char* value(const mk_msgs::SetTakeoff&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::SetTakeoffRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b563bf2328afa304f456e28b10cefd41";
  }

  static const char* value(const mk_msgs::SetTakeoffRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::SetTakeoffRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetTakeoff";
  }

  static const char* value(const mk_msgs::SetTakeoffRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::SetTakeoffResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b563bf2328afa304f456e28b10cefd41";
  }

  static const char* value(const mk_msgs::SetTakeoffResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::SetTakeoffResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetTakeoff";
  }

  static const char* value(const mk_msgs::SetTakeoffResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MK_MSGS_SERVICE_SETTAKEOFF_H

