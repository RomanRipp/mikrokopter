/* Auto-generated by genmsg_cpp for file /home/loki/Documents/ros_workspace/mikrokopter/mk_msgs/srv/SetSerialPoti.srv */
#ifndef MK_MSGS_SERVICE_SETSERIALPOTI_H
#define MK_MSGS_SERVICE_SETSERIALPOTI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mk_msgs
{
template <class ContainerAllocator>
struct SetSerialPotiRequest_ {
  typedef SetSerialPotiRequest_<ContainerAllocator> Type;

  SetSerialPotiRequest_()
  : poti1(0)
  , poti2(0)
  , poti3(0)
  , poti4(0)
  {
  }

  SetSerialPotiRequest_(const ContainerAllocator& _alloc)
  : poti1(0)
  , poti2(0)
  , poti3(0)
  , poti4(0)
  {
  }

  typedef int32_t _poti1_type;
  int32_t poti1;

  typedef int32_t _poti2_type;
  int32_t poti2;

  typedef int32_t _poti3_type;
  int32_t poti3;

  typedef int32_t _poti4_type;
  int32_t poti4;


  typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetSerialPotiRequest
typedef  ::mk_msgs::SetSerialPotiRequest_<std::allocator<void> > SetSerialPotiRequest;

typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiRequest> SetSerialPotiRequestPtr;
typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiRequest const> SetSerialPotiRequestConstPtr;


template <class ContainerAllocator>
struct SetSerialPotiResponse_ {
  typedef SetSerialPotiResponse_<ContainerAllocator> Type;

  SetSerialPotiResponse_()
  : ack(0)
  {
  }

  SetSerialPotiResponse_(const ContainerAllocator& _alloc)
  : ack(0)
  {
  }

  typedef int16_t _ack_type;
  int16_t ack;


  typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetSerialPotiResponse
typedef  ::mk_msgs::SetSerialPotiResponse_<std::allocator<void> > SetSerialPotiResponse;

typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiResponse> SetSerialPotiResponsePtr;
typedef boost::shared_ptr< ::mk_msgs::SetSerialPotiResponse const> SetSerialPotiResponseConstPtr;

struct SetSerialPoti
{

typedef SetSerialPotiRequest Request;
typedef SetSerialPotiResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetSerialPoti
} // namespace mk_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2fccd5b9101c71baf5123296a0a3289b";
  }

  static const char* value(const  ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2fccd5b9101c71baULL;
  static const uint64_t static_value2 = 0xf5123296a0a3289bULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetSerialPotiRequest";
  }

  static const char* value(const  ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
int32 poti1\n\
int32 poti2\n\
int32 poti3\n\
int32 poti4\n\
\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efd27fb04e2a6ce3c9ff1f47eb32e7bb";
  }

  static const char* value(const  ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xefd27fb04e2a6ce3ULL;
  static const uint64_t static_value2 = 0xc9ff1f47eb32e7bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetSerialPotiResponse";
  }

  static const char* value(const  ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
int16 ack\n\
\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::SetSerialPotiRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.poti1);
    stream.next(m.poti2);
    stream.next(m.poti3);
    stream.next(m.poti4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetSerialPotiRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::SetSerialPotiResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetSerialPotiResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mk_msgs::SetSerialPoti> {
  static const char* value() 
  {
    return "d1224392e458021cfd856dc94ab7891a";
  }

  static const char* value(const mk_msgs::SetSerialPoti&) { return value(); } 
};

template<>
struct DataType<mk_msgs::SetSerialPoti> {
  static const char* value() 
  {
    return "mk_msgs/SetSerialPoti";
  }

  static const char* value(const mk_msgs::SetSerialPoti&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d1224392e458021cfd856dc94ab7891a";
  }

  static const char* value(const mk_msgs::SetSerialPotiRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::SetSerialPotiRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetSerialPoti";
  }

  static const char* value(const mk_msgs::SetSerialPotiRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d1224392e458021cfd856dc94ab7891a";
  }

  static const char* value(const mk_msgs::SetSerialPotiResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mk_msgs::SetSerialPotiResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/SetSerialPoti";
  }

  static const char* value(const mk_msgs::SetSerialPotiResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MK_MSGS_SERVICE_SETSERIALPOTI_H

