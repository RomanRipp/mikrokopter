/* Auto-generated by genmsg_cpp for file /home/systems/Documents/ros_workspace/mikrokopter/mk_msgs/msg/naviCommands.msg */
#ifndef MK_MSGS_MESSAGE_NAVICOMMANDS_H
#define MK_MSGS_MESSAGE_NAVICOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace mk_msgs
{
template <class ContainerAllocator>
struct naviCommands_ {
  typedef naviCommands_<ContainerAllocator> Type;

  naviCommands_()
  : header()
  , longitude(0.0)
  , latitude(0.0)
  , altitude(0.0)
  , heading(0.0)
  , toleranceRadius(0)
  , holdTime(0)
  , index(0)
  , eventChannel(0)
  , altitudeRate(0)
  , speed(0.0)
  , status(0)
  , eventFlag(0)
  , type(0)
  , camAngle(0)
  {
  }

  naviCommands_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , longitude(0.0)
  , latitude(0.0)
  , altitude(0.0)
  , heading(0.0)
  , toleranceRadius(0)
  , holdTime(0)
  , index(0)
  , eventChannel(0)
  , altitudeRate(0)
  , speed(0.0)
  , status(0)
  , eventFlag(0)
  , type(0)
  , camAngle(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _longitude_type;
  float longitude;

  typedef float _latitude_type;
  float latitude;

  typedef float _altitude_type;
  float altitude;

  typedef float _heading_type;
  float heading;

  typedef int32_t _toleranceRadius_type;
  int32_t toleranceRadius;

  typedef int32_t _holdTime_type;
  int32_t holdTime;

  typedef int32_t _index_type;
  int32_t index;

  typedef int32_t _eventChannel_type;
  int32_t eventChannel;

  typedef int32_t _altitudeRate_type;
  int32_t altitudeRate;

  typedef float _speed_type;
  float speed;

  typedef int32_t _status_type;
  int32_t status;

  typedef int32_t _eventFlag_type;
  int32_t eventFlag;

  typedef int32_t _type_type;
  int32_t type;

  typedef int32_t _camAngle_type;
  int32_t camAngle;


  typedef boost::shared_ptr< ::mk_msgs::naviCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mk_msgs::naviCommands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct naviCommands
typedef  ::mk_msgs::naviCommands_<std::allocator<void> > naviCommands;

typedef boost::shared_ptr< ::mk_msgs::naviCommands> naviCommandsPtr;
typedef boost::shared_ptr< ::mk_msgs::naviCommands const> naviCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mk_msgs::naviCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mk_msgs::naviCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mk_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::naviCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mk_msgs::naviCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mk_msgs::naviCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86916e842c23439ce3ae34b26ef90d4f";
  }

  static const char* value(const  ::mk_msgs::naviCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x86916e842c23439cULL;
  static const uint64_t static_value2 = 0xe3ae34b26ef90d4fULL;
};

template<class ContainerAllocator>
struct DataType< ::mk_msgs::naviCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mk_msgs/naviCommands";
  }

  static const char* value(const  ::mk_msgs::naviCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mk_msgs::naviCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# between -pi to +pi\n\
float32 longitude\n\
float32 latitude\n\
float32 altitude\n\
float32 heading\n\
int32 toleranceRadius\n\
int32 holdTime\n\
int32 index\n\
int32 eventChannel\n\
int32 altitudeRate\n\
float32 speed\n\
int32 status\n\
int32 eventFlag\n\
int32 type\n\
int32 camAngle\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::mk_msgs::naviCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::mk_msgs::naviCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::mk_msgs::naviCommands_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mk_msgs::naviCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.longitude);
    stream.next(m.latitude);
    stream.next(m.altitude);
    stream.next(m.heading);
    stream.next(m.toleranceRadius);
    stream.next(m.holdTime);
    stream.next(m.index);
    stream.next(m.eventChannel);
    stream.next(m.altitudeRate);
    stream.next(m.speed);
    stream.next(m.status);
    stream.next(m.eventFlag);
    stream.next(m.type);
    stream.next(m.camAngle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct naviCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mk_msgs::naviCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mk_msgs::naviCommands_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "toleranceRadius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.toleranceRadius);
    s << indent << "holdTime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.holdTime);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "eventChannel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.eventChannel);
    s << indent << "altitudeRate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.altitudeRate);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "eventFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.eventFlag);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "camAngle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camAngle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MK_MSGS_MESSAGE_NAVICOMMANDS_H

