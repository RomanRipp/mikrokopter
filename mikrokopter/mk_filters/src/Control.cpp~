#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <iostream>
#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <sys/select.h>
#include <stropts.h>
#include <asm/ioctls.h>

using namespace std;
using namespace ros;
using namespace nav_msgs;

int mykbhit() {
    static const int STDIN = 0;
    static bool initialized = false;

    if (! initialized) {
        // Use termios to turn off line buffering
        termios term;
        tcgetattr(STDIN, &term);
        term.c_lflag &= ~ICANON;
        tcsetattr(STDIN, TCSANOW, &term);
        setbuf(stdin, NULL);
        initialized = true;
    }

    int bytesWaiting;
    ioctl(STDIN, FIONREAD, &bytesWaiting);
    return bytesWaiting;
}


int mygetch() {
  struct termios oldt,
                 newt;
  int            ch;
  tcgetattr( STDIN_FILENO, &oldt );
  newt = oldt;
  newt.c_lflag &= ( ICANON | ECHO );
  tcsetattr( STDIN_FILENO, TCSANOW, &newt );
  ch = getchar();
  tcsetattr( STDIN_FILENO, TCSANOW, &oldt );
  return ch;
}


int main(int argc, char** argv){
	int i;	
	ROS_INFO("This node gives directions according to robot position.");
	init(argc,argv,"TelOp");
	NodeHandle nh("/robot");
	Publisher velout = nh.advertise<geometry_msgs::Twist>("/cmd_vel",5);
	Rate Loop_rate(10);
	while(ok()){
		//cout<<"!";
		
		if (mykbhit()){
			c = mygetch();
			i=c;
			switch (i){
				case 43 : Gas++; break;
				case 45 : Gas--; break;
			}
		}
		cout<<"key: "<<i<<" R: "<<Rttn<<" S: "<<Spd<<endl;
//		geometry_msgs::Twist msg;
//		msg.linear.x=Spd;
//		msg.angular.z=Rttn;
//		Duration(0.1).sleep();
//		velout.publish(msg);
		spinOnce();
	}

	spin();
	return 0;
}
